"use client";
import React, { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "../../components/Card";
import { Button } from "../../components/Button";
import { Badge } from "../../components/Badge";
import { Progress } from "../../components/Progress";
import { 
  TrendingUp, 
  Shield, 
  AlertTriangle, 
  Info, 
  PieChart, 
  BarChart3,
  Target,
  Brain,
  Zap,
  ChevronDown,
  ChevronUp
} from "lucide-react";
import { AllocationPlan } from "../domain/allocationEngine";

interface EnhancedPlanSummaryProps {
  plan: AllocationPlan;
  showDetails?: boolean;
  showStressTest?: boolean;
  showSignalAnalysis?: boolean;
}

export default function EnhancedPlanSummary({ 
  plan, 
  showDetails = true, 
  showStressTest = true,
  showSignalAnalysis = true 
}: EnhancedPlanSummaryProps) {
  const [expandedSections, setExpandedSections] = useState<Record<string, boolean>>({
    allocation: true,
    rationale: false,
    signals: false,
    stressTest: false
  });

  const toggleSection = (section: string) => {
    setExpandedSections(prev => ({ ...prev, [section]: !prev[section] }));
  };

  // Calculate summary stats
  const equityTotal = plan.buckets
    .filter(b => b.class === "Stocks" || b.class === "Mutual Funds")
    .reduce((sum, b) => sum + b.pct, 0);
  
  const safetyTotal = plan.buckets
    .filter(b => b.class === "Debt" || b.class === "Liquid")
    .reduce((sum, b) => sum + b.pct, 0);

  const getRiskColor = (riskLevel: string) => {
    switch (riskLevel) {
      case "Conservative": return "text-blue-600 bg-blue-50 border-blue-200";
      case "Moderate": return "text-orange-600 bg-orange-50 border-orange-200";
      case "Aggressive": return "text-red-600 bg-red-50 border-red-200";
      default: return "text-gray-600 bg-gray-50 border-gray-200";
    }
  };

  const getAssetIcon = (assetClass: string) => {
    switch (assetClass) {
      case "Stocks": return "üìà";
      case "Mutual Funds": return "üéØ";
      case "Debt": return "üèõÔ∏è";
      case "Gold": return "ü•á";
      case "Real Estate": return "üè†";
      case "Liquid": return "üíß";
      default: return "üìä";
    }
  };

  return (
    <div className="space-y-6">
      {/* Header Summary */}
      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <div>
              <CardTitle className="flex items-center gap-2">
                <Brain className="w-5 h-5 text-blue-500" />
                Your Personalized Investment Plan
              </CardTitle>
              <CardDescription>
                Generated by our 10-Advisor Council AI using professional-grade analysis
              </CardDescription>
            </div>
            <div className="text-right">
              <Badge className={`${getRiskColor(plan.riskLevel)} border`}>
                {plan.riskLevel} Risk
              </Badge>
              {plan.riskScore && (
                <div className="text-sm text-muted-foreground mt-1">
                  Risk Score: {plan.riskScore}/100
                </div>
              )}
            </div>
          </div>
        </CardHeader>

        <CardContent className="space-y-6">
          {/* Key Metrics */}
          <div className="grid grid-cols-3 gap-4">
            <div className="text-center p-4 bg-muted/30 rounded-lg">
              <div className="text-2xl font-bold text-green-600">{equityTotal}%</div>
              <div className="text-sm text-muted-foreground">Growth Assets</div>
            </div>
            <div className="text-center p-4 bg-muted/30 rounded-lg">
              <div className="text-2xl font-bold text-blue-600">{safetyTotal}%</div>
              <div className="text-sm text-muted-foreground">Safety Assets</div>
            </div>
            <div className="text-center p-4 bg-muted/30 rounded-lg">
              <div className="text-2xl font-bold text-orange-600">
                {100 - equityTotal - safetyTotal}%
              </div>
              <div className="text-sm text-muted-foreground">Alternative Assets</div>
            </div>
          </div>

          {/* Asset Allocation */}
          <div>
            <Button
              variant="ghost"
              onClick={() => toggleSection('allocation')}
              className="w-full justify-between p-0 h-auto"
            >
              <h3 className="text-lg font-semibold flex items-center gap-2">
                <PieChart className="w-5 h-5" />
                Asset Allocation
              </h3>
              {expandedSections.allocation ? <ChevronUp className="w-4 h-4" /> : <ChevronDown className="w-4 h-4" />}
            </Button>

            {expandedSections.allocation && (
              <div className="mt-4 space-y-3">
                {plan.buckets
                  .sort((a, b) => b.pct - a.pct)
                  .map(bucket => (
                    <div key={bucket.class} className="space-y-2">
                      <div className="flex items-center justify-between">
                        <div className="flex items-center gap-2">
                          <span className="text-lg">{getAssetIcon(bucket.class)}</span>
                          <span className="font-medium">{bucket.class}</span>
                          <Badge variant="outline" className="text-xs">
                            {bucket.riskCategory}
                          </Badge>
                        </div>
                        <div className="text-right">
                          <div className="font-semibold">{bucket.pct}%</div>
                          <div className="text-xs text-muted-foreground">
                            Range: {bucket.range[0]}%-{bucket.range[1]}%
                          </div>
                        </div>
                      </div>
                      <Progress value={bucket.pct} max={100} className="h-2" />
                      <div className="text-sm text-muted-foreground">{bucket.notes}</div>
                    </div>
                  ))}
              </div>
            )}
          </div>
        </CardContent>
      </Card>

      {/* Rationale */}
      <Card>
        <CardHeader>
          <Button
            variant="ghost"
            onClick={() => toggleSection('rationale')}
            className="w-full justify-between p-0 h-auto"
          >
            <CardTitle className="flex items-center gap-2">
              <Target className="w-5 h-5 text-blue-500" />
              Why This Allocation?
            </CardTitle>
            {expandedSections.rationale ? <ChevronUp className="w-4 h-4" /> : <ChevronDown className="w-4 h-4" />}
          </Button>
        </CardHeader>

        {expandedSections.rationale && (
          <CardContent>
            <div className="prose prose-sm max-w-none">
              <p className="text-muted-foreground leading-relaxed">
                {plan.rationale}
              </p>
            </div>
          </CardContent>
        )}
      </Card>

      {/* Signal Analysis (Enhanced Feature) */}
      {showSignalAnalysis && plan.signals && (
        <Card>
          <CardHeader>
            <Button
              variant="ghost"
              onClick={() => toggleSection('signals')}
              className="w-full justify-between p-0 h-auto"
            >
              <CardTitle className="flex items-center gap-2">
                <Zap className="w-5 h-5 text-yellow-500" />
                Signal Analysis
                <Badge variant="outline" className="ml-2">AI Insights</Badge>
              </CardTitle>
              {expandedSections.signals ? <ChevronUp className="w-4 h-4" /> : <ChevronDown className="w-4 h-4" />}
            </Button>
            <CardDescription>
              Detailed breakdown of factors influencing your allocation
            </CardDescription>
          </CardHeader>

          {expandedSections.signals && (
            <CardContent className="space-y-4">
              {plan.signals
                .sort((a, b) => Math.abs(b.equitySignal * b.weight) - Math.abs(a.equitySignal * a.weight))
                .slice(0, 8) // Show top 8 signals
                .map((signal, index) => {
                  const impact = signal.equitySignal * signal.weight;
                  const isPositive = impact > 0;
                  
                  return (
                    <div key={signal.factor} className="flex items-center gap-4 p-3 bg-muted/30 rounded-lg">
                      <div className="flex-shrink-0">
                        <div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-bold ${
                          isPositive ? 'bg-green-100 text-green-700' : 'bg-red-100 text-red-700'
                        }`}>
                          {isPositive ? '+' : '‚àí'}
                        </div>
                      </div>
                      
                      <div className="flex-1">
                        <div className="font-medium capitalize">
                          {signal.factor.replace(/_/g, ' ')}
                        </div>
                        <div className="text-sm text-muted-foreground">
                          {signal.explanation}
                        </div>
                      </div>
                      
                      <div className="text-right">
                        <div className={`font-semibold ${isPositive ? 'text-green-600' : 'text-red-600'}`}>
                          {isPositive ? '+' : ''}{Math.round(impact)}
                        </div>
                        <div className="text-xs text-muted-foreground">
                          Weight: {Math.round(signal.weight * 100)}%
                        </div>
                      </div>
                    </div>
                  );
                })}
            </CardContent>
          )}
        </Card>
      )}

      {/* Stress Test Results (Enhanced Feature) */}
      {showStressTest && plan.stressTest && (
        <Card>
          <CardHeader>
            <Button
              variant="ghost"
              onClick={() => toggleSection('stressTest')}
              className="w-full justify-between p-0 h-auto"
            >
              <CardTitle className="flex items-center gap-2">
                <Shield className="w-5 h-5 text-green-500" />
                Stress Test Results
                <Badge variant="outline" className="ml-2">Risk Analysis</Badge>
              </CardTitle>
              {expandedSections.stressTest ? <ChevronUp className="w-4 h-4" /> : <ChevronDown className="w-4 h-4" />}
            </Button>
            <CardDescription>
              How your portfolio might perform in various market scenarios
            </CardDescription>
          </CardHeader>

          {expandedSections.stressTest && (
            <CardContent className="space-y-4">
              {Object.entries(plan.stressTest.scenarios).map(([scenario, result]) => (
                <div key={scenario} className="p-4 border rounded-lg">
                  <div className="flex items-center justify-between mb-2">
                    <h4 className="font-medium">{scenario}</h4>
                    <div className={`font-semibold ${
                      result.portfolioImpact > 0 ? 'text-green-600' : 'text-red-600'
                    }`}>
                      {result.portfolioImpact > 0 ? '+' : ''}{result.portfolioImpact.toFixed(1)}%
                    </div>
                  </div>
                  
                  <div className="grid grid-cols-2 gap-4 mt-3 text-sm">
                    <div>
                      <div className="text-muted-foreground">Emergency Fund Coverage</div>
                      <div className="font-medium">
                        {result.monthsCovered.toFixed(1)} months
                      </div>
                    </div>
                    <div>
                      <div className="text-muted-foreground">Status</div>
                      <div className={`font-medium ${
                        result.monthsCovered >= 6 ? 'text-green-600' : 
                        result.monthsCovered >= 3 ? 'text-orange-600' : 'text-red-600'
                      }`}>
                        {result.monthsCovered >= 6 ? 'Good' : 
                         result.monthsCovered >= 3 ? 'Adequate' : 'Concerning'}
                      </div>
                    </div>
                  </div>
                  
                  <div className="mt-3 p-2 bg-muted/30 rounded text-sm">
                    <strong>Recommendation:</strong> {result.recommendation}
                  </div>
                </div>
              ))}
            </CardContent>
          )}
        </Card>
      )}

      {/* Top Drivers (Legacy Compatibility) */}
      {plan.explain?.topDrivers && plan.explain.topDrivers.length > 0 && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <BarChart3 className="w-5 h-5 text-purple-500" />
              Key Allocation Drivers
            </CardTitle>
            <CardDescription>
              Primary factors that shaped your investment plan
            </CardDescription>
          </CardHeader>

          <CardContent>
            <div className="space-y-3">
              {plan.explain.topDrivers.slice(0, 5).map((driver, index) => (
                <div key={index} className="flex items-center justify-between p-3 bg-muted/30 rounded-lg">
                  <div className="font-medium capitalize">
                    {driver.driver.replace(/_/g, ' ')}
                  </div>
                  <div className={`font-semibold ${
                    driver.effectPct > 0 ? 'text-green-600' : 'text-red-600'
                  }`}>
                    {driver.effectPct > 0 ? '+' : ''}{driver.effectPct}%
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
}